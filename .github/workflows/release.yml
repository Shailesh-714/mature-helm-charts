name: Release Charts

on:
  workflow_dispatch:

permissions: {}

jobs:
  release:
    permissions:
      contents: write # to push chart release and create a release (helm/chart-releaser-action)
      packages: write # needed for ghcr access

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Add helm repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add opentelemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo add vector https://helm.vector.dev
          helm repo add codecentric https://codecentric.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update

      - name: Build Helm Dependencies
        run: |
          # Build dependencies for all charts
          for chart in charts/incubator/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Updating dependencies for $chart"
              helm dependency update "$chart"
            fi
          done

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: charts/incubator
          config: cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: "true"

      - name: Install ORAS
        run: |
          curl -LO "https://github.com/oras-project/oras/releases/download/v1.1.0/oras_1.1.0_linux_amd64.tar.gz"
          tar -xzf oras_1.1.0_linux_amd64.tar.gz
          sudo mv oras /usr/local/bin/
          oras version

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push charts to GHCR and attach images
        run: |
          shopt -s nullglob
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=${{ github.event.repository.name }}
          
          for pkg in .cr-release-packages/*.tgz; do
            if [ -z "${pkg:-}" ]; then
              break
            fi
            
            # Push chart first
            helm push "${pkg}" "oci://ghcr.io/${REPO_OWNER}/${REPO_NAME}"
            
            # Extract chart name and version from package filename
            PKG_NAME=$(basename "${pkg}" .tgz)
            CHART_NAME=$(echo "${PKG_NAME}" | sed 's/-[0-9].*//')
            CHART_VERSION=$(echo "${PKG_NAME}" | sed 's/.*-\([0-9].*\)/\1/')
            CHART_REF="ghcr.io/${REPO_OWNER}/${REPO_NAME}/${CHART_NAME}:${CHART_VERSION}"
            
            echo "Processing chart: ${CHART_NAME}:${CHART_VERSION}"
            
            # Extract all images using helm template
            helm template "${pkg}" | grep "image:" | sort -u | sed 's/.*image: *"*\([^"]*\)"*.*/\1/' > "images-${CHART_NAME}.txt"
            
            echo "Found images for ${CHART_NAME}:"
            cat "images-${CHART_NAME}.txt"
            
            # Pull and attach each image
            while IFS= read -r image; do
              if [ ! -z "$image" ]; then
                echo "Pulling and attaching image: $image"
                if docker pull "$image"; then
                  oras attach "$CHART_REF" --artifact-type application/vnd.docker.distribution.manifest.v2+json "$image"
                  echo "Successfully attached: $image"
                else
                  echo "Failed to pull image: $image"
                fi
              fi
            done < "images-${CHART_NAME}.txt"
            
            rm -f "images-${CHART_NAME}.txt"
          done
