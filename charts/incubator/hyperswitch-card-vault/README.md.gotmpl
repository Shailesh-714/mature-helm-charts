{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ if .Type }}{{ .Type | quote }}{{ end }}
{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Configuration

### Backend Selection

The chart supports three backend options for secrets management:
- `local` (default): No encryption for secrets
- `aws`: AWS KMS for secrets encryption
- `vault`: HashiCorp Vault for secrets management

Set the backend using:
```yaml
backend: local  # or 'aws' or 'vault'
```

### Backend-Specific Configuration

#### AWS KMS Backend
When using AWS KMS (`backend: aws`), configure:
```yaml
backend: aws

secrets:
  aws:
    key_id: "your-kms-key-id"
    region: "us-east-1"

server:
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME"
```

#### HashiCorp Vault Backend
When using HashiCorp Vault (`backend: vault`), configure:
```yaml
backend: vault

secrets:
  vault:
    token: "your-vault-token"

server:
  vault:
    url: "http://vault.example.com:8200"
```

### TLS Configuration

To enable TLS for the card vault server:
```yaml
secrets:
  tls:
    certificate: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    private_key: |
      -----BEGIN PRIVATE KEY-----
      ...
      -----END PRIVATE KEY-----
```

### External Key Manager with mTLS

To enable mTLS for external key manager:
```yaml
server:
  externalKeyManager:
    url: "https://keymanager.example.com:5000"

secrets:
  external_key_manager:
    cert: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
  api_client:
    identity: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
```

### Database Configuration

The chart supports both internal (Bitnami PostgreSQL) and external PostgreSQL:

#### Internal PostgreSQL (default)
```yaml
postgresql:
  enabled: true
  auth:
    username: db_user
    password: your-secure-password
    database: locker-db
```

#### External PostgreSQL
```yaml
postgresql:
  enabled: false

external:
  postgresql:
    enabled: true
    config:
      host: postgres.example.com
      port: 5432
      username: db_user
      password: your-secure-password
      database: locker-db
```

{{ template "chart.valuesSection" . }}

## Examples

### Example 1: Local Development
```yaml
backend: local

postgresql:
  enabled: true
  auth:
    password: "dev-password"

tenant_secrets:
  public:
    master_key: "your-master-key"
    public_key: |
      -----BEGIN PUBLIC KEY-----
      ...
      -----END PUBLIC KEY-----
```

### Example 2: Production with AWS KMS
```yaml
backend: aws

secrets:
  aws:
    key_id: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012"
    region: "us-east-1"
  database:
    password: "encrypted-password"

server:
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/hyperswitch-card-vault"

external:
  postgresql:
    enabled: true
    config:
      host: "prod-postgres.example.com"
      port: 5432
      username: "vault_user"
      password: "encrypted-password"
      database: "card_vault"
```

### Example 3: Production with HashiCorp Vault
```yaml
backend: vault

secrets:
  vault:
    token: "hvs.your-vault-token"

server:
  vault:
    url: "https://vault.example.com:8200"

# Enable TLS
secrets:
  tls:
    certificate: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    private_key: |
      -----BEGIN PRIVATE KEY-----
      ...
      -----END PRIVATE KEY-----
```

## Key Generation

### Generate Master Key
```bash
cargo install --git https://github.com/juspay/hyperswitch-card-vault --root . && \
./bin/utils master-key && \
rm ./bin/utils && rmdir ./bin
```

### Generate Key Pairs
```bash
# Generate private keys
openssl genrsa -out locker-private-key.pem 2048
openssl genrsa -out tenant-private-key.pem 2048

# Generate public keys
openssl rsa -in locker-private-key.pem -pubout -out locker-public-key.pem
openssl rsa -in tenant-private-key.pem -pubout -out tenant-public-key.pem
```

{{ template "helm-docs.versionFooter" . }}
