1. Get the Monitoring Stack URLs:
   - If Ingress is not available, use port-forwarding:
     ```shell
     export ADDRESS_CREATED=$(kubectl get ingress -n {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
     if [ -z "$ADDRESS_CREATED" ]; then
       echo "Using port-forwarding to access the monitoring services."

       # Port-forwarding commands
       kubectl port-forward service/{{ .Release.Name }}-grafana 3000:80 -n {{ .Release.Namespace }} > /dev/null 2>&1 & \
       kubectl port-forward service/{{ .Release.Name }}-kube-prometheus-prometheus 9090:9090 -n {{ .Release.Namespace }} > /dev/null 2>&1 & \
       kubectl port-forward service/loki 3100:3100 -n {{ .Release.Namespace }} > /dev/null 2>&1 & \
       kubectl port-forward service/{{ .Release.Name }}-kube-prometheus-alertmanager 9093:9093 -n {{ .Release.Namespace }} > /dev/null 2>&1 & \
       kubectl port-forward service/{{ .Release.Name }}-opentelemetry-collector 9898:9898 -n {{ .Release.Namespace }} > /dev/null 2>&1 &

       echo "======================================================"
       echo " Grafana running on: http://localhost:3000"
       echo " Prometheus running on: http://localhost:9090"
       echo " Loki running on: http://localhost:3100"
       echo " Alertmanager running on: http://localhost:9093"
       echo " OpenTelemetry Metrics on: http://localhost:9898/metrics"
       echo "======================================================"
       echo " Grafana Credentials:"
       echo " Username: admin"
       echo " Password: {{ index .Values "kube-prometheus-stack" "grafana" "adminPassword" }}"
       echo "======================================================"

       echo "\nTo close the exposed ports, run the following command:\n"
       echo "lsof -i:3000,9090,3100,9093,9898 -t | xargs kill"
       echo "======================================================"
     else
       echo "Ingress available. Access the services using the following command:"
       kubectl get ingress -n {{ .Release.Namespace }}
     fi
     ```

2. Available Grafana Dashboards:
   - Payments Dashboard: Monitor payment metrics and performance
   - Pod Usage Dashboard: Monitor resource usage across pods

3. Data Sources configured in Grafana:
   - Prometheus: For metrics
   - Loki: For logs
   - PostgreSQL: For hyperswitch application data

{{- if index .Values "opentelemetry-collector" "enabled" }}

4. Metrics Collection:
   OpenTelemetry Collector is receiving metrics via OTLP protocol on port 4317.
   Configure your applications to send telemetry data to:
   {{ printf "http://%s-opentelemetry-collector.%s.svc.cluster.local:4317" .Release.Name .Release.Namespace }}
{{- end }}

========================================================